using FrigidRogue.MonoGame.Core.Interfaces.Components;
using FrigidRogue.WaveFunctionCollapse;
using GoRogue.MapGeneration;
using GoRogue.MapGeneration.ContextComponents;
using GoRogue.Random;
using SadRogue.Primitives;
using SadRogue.Primitives.GridViews;
using ShaiRandom.Generators;

namespace MarsUndiscovered.Game.Components.GenerationSteps;

public class MiningFacilityGeneration : GenerationStep
{
    /// <summary>
    /// Optional tag that must be associated with the component used to set wall/floor status of tiles changed by this
    /// algorithm.
    /// </summary>
    public readonly string WallFloorComponentTag;

    private readonly IGameProvider _gameProvider;

    /// <summary>
    /// Optional tag that must be associated with the component used to store tunnels generated by this algorithm.
    /// </summary>
    public readonly string IndoorWallFloorComponentTag;

    public IEnhancedRandom RNG { get; set; } = GlobalRandom.DefaultRNG;

    /// <summary>
    /// Creates a new mining facility generation step which creates buildings for the mining facility
    /// </summary>
    /// <param name="name">The name of the generation step.  Defaults to <see cref="MiningFacility" />.</param>
    public MiningFacilityGeneration(IGameProvider gameProvider, string name = null, string indoorWallFloorComponentTag = "IndoorWallFloor", string wallFloorComponentTag = "WallFloor")
        : base(name)
    {
        _gameProvider = gameProvider;
        IndoorWallFloorComponentTag = indoorWallFloorComponentTag;
        WallFloorComponentTag = wallFloorComponentTag;
    }

    protected override IEnumerator<object> OnPerform(GenerationContext generationContext)
    {
        var wallFloorContext = generationContext.GetFirstOrNew<ISettableGridView<bool>>(
            () => new ArrayView<bool>(generationContext.Width, generationContext.Height),
            WallFloorComponentTag
        );

        var indoorWallFloorComponentTag = generationContext.GetFirstOrNew(
            () => new ItemList<Area>(),
            IndoorWallFloorComponentTag
        );


        var waveFunctionCollapseGeneratorPasses = new WaveFunctionCollapseGeneratorPasses();

        waveFunctionCollapseGeneratorPasses.CreatePasses(_gameProvider.Game.Content, "MiningFacility");

        waveFunctionCollapseGeneratorPasses.Reset();
        waveFunctionCollapseGeneratorPasses.Execute();
        waveFunctionCollapseGeneratorPasses.GetAllTiles();
    }
}