using FrigidRogue.WaveFunctionCollapse;
using FrigidRogue.WaveFunctionCollapse.ContentLoaders;
using FrigidRogue.WaveFunctionCollapse.Renderers;
using GoRogue.MapGeneration;
using GoRogue.Random;
using SadRogue.Primitives;
using SadRogue.Primitives.GridViews;
using ShaiRandom.Generators;

namespace MarsUndiscovered.Game.Components.GenerationSteps;

public class MiningFacilityGeneration : GenerationStep
{
    /// <summary>
    /// Optional tag that must be associated with the component used to set wall/floor status of tiles changed by this
    /// algorithm.
    /// </summary>
    public readonly string WallFloorComponentTag;

    private readonly IWaveFunctionCollapseGeneratorPasses _waveFunctionCollapseGeneratorPasses;
    private readonly IWaveFunctionCollapseGeneratorPassesContentLoader _contentLoader;
    private readonly IWaveFunctionCollapseGeneratorPassesRenderer _renderer;

    /// <summary>
    /// Optional tag that must be associated with the component used to store tunnels generated by this algorithm.
    /// </summary>
    public readonly string IndoorWallFloorComponentTag;

    public IEnhancedRandom RNG { get; set; } = GlobalRandom.DefaultRNG;

    /// <summary>
    /// Creates a new mining facility generation step which creates buildings for the mining facility
    /// </summary>
    /// <param name="name">The name of the generation step.  Defaults to <see cref="MiningFacility" />.</param>
    public MiningFacilityGeneration(
        IWaveFunctionCollapseGeneratorPasses waveFunctionCollapseGeneratorPasses,
        IWaveFunctionCollapseGeneratorPassesContentLoader contentLoader,
        IWaveFunctionCollapseGeneratorPassesRenderer renderer,
        string name = null,
        string indoorWallFloorComponentTag = "IndoorWallFloor",
        string wallFloorComponentTag = "WallFloor")
        : base(name)
    {
        _waveFunctionCollapseGeneratorPasses = waveFunctionCollapseGeneratorPasses;
        _contentLoader = contentLoader;
        _renderer = renderer;
        IndoorWallFloorComponentTag = indoorWallFloorComponentTag;
        WallFloorComponentTag = wallFloorComponentTag;
    }

    protected override IEnumerator<object> OnPerform(GenerationContext generationContext)
    {
        _waveFunctionCollapseGeneratorPasses.LoadContent(_contentLoader, "MiningFacility");
        _waveFunctionCollapseGeneratorPasses.MapOptions.MapWidth = generationContext.Width;
        _waveFunctionCollapseGeneratorPasses.MapOptions.MapHeight = generationContext.Height;
        _waveFunctionCollapseGeneratorPasses.CreatePasses();
        _waveFunctionCollapseGeneratorPasses.ExecuteUntilSuccess();

        var texture2D = _waveFunctionCollapseGeneratorPasses.RenderToTexture2D(_renderer);

        var data = new Color[texture2D.Width * texture2D.Height];

        texture2D.GetData(data);

        var wallFloors = data.Select(c => c.Equals(Color.Black) ? false : true).ToArray();

        generationContext.GetFirstOrNew<ISettableGridView<bool>>(
            () => new ArrayView<bool>(wallFloors, generationContext.Width),
            WallFloorComponentTag
        );

        yield return null;
    }
}